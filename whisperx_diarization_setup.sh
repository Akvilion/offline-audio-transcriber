#!/usr/bin/env bash

# üõ†Ô∏è –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ WhisperX —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π (Docker + NVIDIA) üõ†Ô∏è
#
# –≠—Ç–æ—Ç Shell-—Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã Ubuntu
# (20.04/22.04/24.04) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WhisperX —á–µ—Ä–µ–∑ Docker —Å —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –Ω–∞ GPU
# –æ—Ç NVIDIA. –û–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç
# –≥–æ—Ç–æ–≤–æ–µ –∫ —Ä–∞–±–æ—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.
#
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–∫—Ä–∏–ø—Ç —Å–ª–µ–¥—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º NVIDIA –∏ Docker
# –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
#
# –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –∏ –Ω–∞–ª–∏—á–∏–µ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ NVIDIA.
# - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker Engine –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#   –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ `sudo`.
# - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ NVIDIA Container Toolkit: –ü–æ–∑–≤–æ–ª—è–µ—Ç Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
#   –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã GPU.
# - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU –≤ Docker: –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
#   –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
# - –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–∑–∞ WhisperX: –°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π Docker-–æ–±—Ä–∞–∑ —Å–æ –≤—Å–µ–º–∏
#   –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
# - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:
#   - –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ `audio/` –∏ `results/`.
#   - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –º–æ–¥–µ–ª–µ–π –≤ `~/whisperx/` –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞.
#   - –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ `config.env` —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
# - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏: –ù–∞–∑–Ω–∞—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ –ø–∞–ø–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
#   –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–∞ —É Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
#
# –ü–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# 1. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º: chmod +x whisperx_diarization_setup.sh
# 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ: ./whisperx_diarization_setup.sh
# 3. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã.

#  –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º GPU: $ watch -n 5 nvidia-smi
#
# –ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/ 
# –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 14.09.2025
# –í–µ—Ä—Å–∏—è: 2.2
#
# –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/offline-audio-transcriber
#
# ===================================================================

## –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –¥–ª—è bash. –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ.
set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º printf –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
log()     { printf "${BLUE}[INFO]${NC} %s\n" "$1"; }
success() { printf "${GREEN}[SUCCESS]${NC} %s\n" "$1"; }
warning() { printf "${YELLOW}[WARNING]${NC} %s\n" "$1"; }
error()   { printf "${RED}[ERROR]${NC} %s\n" "$1" >&2; } # –û—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –≤ stderr

# --- –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã ---

check_distro() {
    if ! [ -f /etc/os-release ]; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É."
        exit 1
    fi
    . /etc/os-release
    if [[ "$ID" != "ubuntu" && "$ID" != "debian" ]]; then
        error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Ubuntu/Debian. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: $PRETTY_NAME"
        exit 1
    fi
    success "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞: $PRETTY_NAME"
}

check_gpu() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è NVIDIA GPU –∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤..."
    if ! command -v nvidia-smi &> /dev/null; then
        error "–ö–æ–º–∞–Ω–¥–∞ 'nvidia-smi' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã NVIDIA."
        printf "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        printf "  sudo ubuntu-drivers autoinstall\n"
        printf "  sudo reboot\n"
        exit 1
    fi
    if ! nvidia-smi &> /dev/null; then
        error "'nvidia-smi' –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤."
        exit 1
    fi
    GPU_INFO=$(nvidia-smi --query-gpu=name,memory.total --format=csv,noheader,nounits)
    DRIVER_VERSION=$(nvidia-smi --query-gpu=driver_version --format=csv,noheader,nounits)
    success "–ù–∞–π–¥–µ–Ω GPU: $GPU_INFO"
    log "–í–µ—Ä—Å–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: $DRIVER_VERSION"
}

# --- –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---

install_docker() {
    if command -v docker &> /dev/null && docker --version &> /dev/null; then
        success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $(docker --version)"
    else
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Engine..."
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
        success "Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Ç–∞–º
    if ! groups "$USER" | grep -q '\bdocker\b'; then
        log "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $USER –≤ –≥—Ä—É–ø–ø—É docker..."
        sudo usermod -aG docker "$USER"
        warning "–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω."
        log "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'sudo reboot' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏."
    fi
}

install_nvidia_toolkit() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NVIDIA Container Toolkit..."
    
    if command -v nvidia-ctk &> /dev/null; then
        success "NVIDIA Container Toolkit —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    else
        log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è NVIDIA..."
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ (ubuntu22.04, ubuntu24.04 –∏ —Ç.–¥.)
        curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
          && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list > /dev/null
        
        log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        sudo apt-get update
        sudo apt-get install -y nvidia-container-toolkit
        success "NVIDIA Container Toolkit —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi

    log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NVIDIA GPU..."
    sudo nvidia-ctk runtime configure --runtime=docker
    
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker daemon –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    sudo systemctl restart docker
    sleep 3 # –î–∞–µ–º –¥–µ–º–æ–Ω—É –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    success "Docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å NVIDIA GPU."
}

test_docker_gpu() {
    log "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π GPU..."
    if ! sudo docker run --rm hello-world > /dev/null 2>&1; then
        error "–ë–∞–∑–æ–≤—ã–π Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ 'systemctl status docker'"
        exit 1
    fi
    success "–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Docker –ø—Ä–æ–π–¥–µ–Ω."

    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GPU –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    local cuda_image="nvidia/cuda:12.4.1-base-ubuntu22.04" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
    log "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑: $cuda_image"

    if ! sudo docker pull "$cuda_image" > /dev/null; then
        warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑ $cuda_image. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç GPU."
        return 1
    fi

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å nvidia-smi –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    local gpu_name_in_container
    gpu_name_in_container=$(sudo docker run --rm --gpus all "$cuda_image" nvidia-smi --query-gpu=name --format=csv,noheader)

    if [[ -n "$gpu_name_in_container" ]]; then
        success "üéâ GPU —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: $gpu_name_in_container"
        return 0 # –£—Å–ø–µ—Ö
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ GPU –∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞."
        warning "WhisperX –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ CPU (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)."
        log "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:"
        log " - –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤–µ—Ä—Å–∏–π –¥—Ä–∞–π–≤–µ—Ä–∞, toolkit –∏–ª–∏ docker."
        log " - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: 'sudo reboot'"
        return 1 # –ù–µ—É–¥–∞—á–∞
    fi
}

pull_whisperx_image() {
    log "–ó–∞–≥—Ä—É–∑–∫–∞ Docker –æ–±—Ä–∞–∑–∞ WhisperX..."
    local whisperx_image="ghcr.io/jim60105/whisperx:latest" 
    
    if sudo docker pull "$whisperx_image"; then
        success "–û–±—Ä–∞–∑ $whisperx_image –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ."
        local image_size_bytes
        image_size_bytes=$(sudo docker image inspect "$whisperx_image" --format='{{.Size}}')
        local image_size_gb
        image_size_gb=$(awk "BEGIN {printf \"%.2f\", $image_size_bytes/1024/1024/1024}")
        log "–†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: ~${image_size_gb} GB"
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ WhisperX: $whisperx_image"
        exit 1
    fi
}

setup_workspace() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    local base_dir="."
    local cache_dir="$HOME/whisperx"
    
    mkdir -p "$base_dir"/{audio,results}
    mkdir -p "$cache_dir"
    
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ 777 –Ω–∞ –ø–∞–ø–∫–∏..."
    chmod -R 777 "$base_dir"/audio "$base_dir"/results "$cache_dir"
    
    success "–°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
    printf "  üìÇ %s/audio   - –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤\n" "$(pwd)"
    printf "  üìÇ %s/results - –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n" "$(pwd)"
    printf "  üß† %s    - –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π\n" "$cache_dir"

    local config_file="$base_dir/config.env"
    if [ -f "$config_file" ]; then
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è $config.env –Ω–∞ $config_file
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª $config_file —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ."
    else
        log "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: $config_file"
        cat > "$config_file" << 'EOF'
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhisperX
# HuggingFace —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://huggingface.co/settings/tokens)
# –í–ê–ñ–ù–û: –ü—Ä–∏–º–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞:
# https://huggingface.co/pyannote/speaker-diarization-3.1
# https://huggingface.co/pyannote/segmentation-3.0
HF_TOKEN=your_token_here

# –ú–æ–¥–µ–ª—å Whisper (tiny, base, small, medium, large-v1, large-v2, large-v3)
WHISPER_MODEL=large-v3

# –Ø–∑—ã–∫ –∞—É–¥–∏–æ (ru, en, auto –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
LANGUAGE=ru

# –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (—á–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ GPU)
BATCH_SIZE=16

# –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (cuda –∏–ª–∏ cpu)
DEVICE=cuda

# –í–∫–ª—é—á–∏—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º)
ENABLE_DIARIZATION=true

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
MIN_SPEAKERS=

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)  
MAX_SPEAKERS=

# –¢–∏–ø –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (float16, float32, int8)
COMPUTE_TYPE=float16

# –ú–µ—Ç–æ–¥ VAD –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ—á–∏ (pyannote, silero)
VAD_METHOD=pyannote

# –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CHUNK_SIZE=30
EOF
        success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: $config_file"
    fi
}

final_check() {
    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    if ! command -v docker &>/dev/null; then error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!"; exit 1; fi
    if ! sudo docker image inspect "ghcr.io/jim60105/whisperx:latest" &>/dev/null; then error "–û–±—Ä–∞–∑ WhisperX –Ω–µ –Ω–∞–π–¥–µ–Ω!"; exit 1; fi
    if ! [ -d "./audio" ]; then error "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"; exit 1; fi
    if ! [ -d "$HOME/whisperx" ]; then error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"; exit 1; fi
    
    success "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!"
}

show_usage() {
    printf "\n=====================================================================\n"
    printf "üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!\n"
    printf "=====================================================================\n\n"
    
    printf "üî• –í–ê–ñ–ù–´–ï –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:\n\n"
    
    printf "1. üîë ${YELLOW}–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω Hugging Face${NC} –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏:\n"
    printf "   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: nano ./config.env\n"
    printf "   - –ó–∞–º–µ–Ω–∏—Ç–µ 'your_token_here' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω —Å https://huggingface.co/settings/tokens\n\n"

    printf "2. üîÑ ${YELLOW}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É${NC}, –µ—Å–ª–∏ –≤—ã –Ω–µ –±—ã–ª–∏ –≤ –≥—Ä—É–ø–ø–µ docker:\n"
    printf "   sudo reboot\n\n"
    
    printf "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:\n"
    printf "3. üìÅ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ ./audio/\n"
    printf "4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É: python3 whisperx_diarization.py\n\n"
    
    printf "–†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
    printf "  üìÇ ./audio      - –í—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã (*.wav, *.mp3, *.m4a)\n"
    printf "  üìÇ ./results    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n"
    printf "  üß† ~/whisperx/  - –ö–µ—à –º–æ–¥–µ–ª–µ–π (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)\n"
    printf "  ‚öôÔ∏è  ./config.env - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    
    printf "=====================================================================\n"
}

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
main() {
    printf "=====================================================================\n"
    printf "üéôÔ∏è –£–°–¢–ê–ù–û–í–ö–ê WHISPERX –î–õ–Ø –î–ò–ê–†–ò–ó–ê–¶–ò–ò –†–ï–ß–ò (DOCKER + NVIDIA)\n"
    printf "=====================================================================\n\n"
    
    check_distro
    check_gpu
    install_docker
    install_nvidia_toolkit
    
    if test_docker_gpu; then
      log "–¢–µ—Å—Ç GPU –ø—Ä–æ–π–¥–µ–Ω. WhisperX –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É."
    else
      warning "–¢–µ—Å—Ç GPU –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ './config.env' –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEVICE=cpu, –µ—Å–ª–∏ GPU –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi

    pull_whisperx_image
    setup_workspace
    final_check
    show_usage
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
