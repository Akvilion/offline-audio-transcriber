#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ WhisperX (Docker) üéôÔ∏è 

–≠—Ç–æ—Ç Python-—Å–∫—Ä–∏–ø—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º WhisperX. –û–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
–ø–æ —Å–ø–∏–∫–µ—Ä–∞–º) –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, —á—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã
—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ö —Å GPU NVIDIA.

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–ª—è —Ä–∞–±–æ—Ç—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω Hugging Face (HF_TOKEN)
–∏ –ø—Ä–∏–Ω—è—Ç–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–π –¥–ª—è –º–æ–¥–µ–ª–µ–π pyannote.

–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
- –ò–∑–æ–ª—è—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π Docker-–æ–±—Ä–∞–∑, –∏–∑–±–∞–≤–ª—è—è –æ—Ç —Ä—É—á–Ω–æ–π
  —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyTorch, CUDA –∏ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ GPU –∏ CPU: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–µ–π—Å—Ç–≤—É–µ—Ç GPU NVIDIA –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
  —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ CPU.
- –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ –≤—Å–µ –∞—É–¥–∏–æ
  –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (mp3, wav, m4a –∏ –¥—Ä.).
- –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–µ—à: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –æ–±—â–µ–π –ø–∞–ø–∫–µ `~/.whisperx/`,
  —ç–∫–æ–Ω–æ–º—è –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö.
- –ì–∏–±–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–º–æ–¥–µ–ª—å, —è–∑—ã–∫, —Ç–æ–∫–µ–Ω) —á–µ—Ä–µ–∑
  –≤–Ω–µ—à–Ω–∏–π —Ñ–∞–π–ª `config.env`.
- –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥: –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,
  –≤–∫–ª—é—á–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
- –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã: –ö–æ–º–∞–Ω–¥–∞ `--check` –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —É–±–µ–¥–∏—Ç—å—Å—è,
  —á—Ç–æ Docker, GPU –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.

–ü–æ—Ä—è–¥–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª `config.env`, —É–∫–∞–∑–∞–≤ –≤–∞—à HF_TOKEN.
2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É `audio/`.
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç:
   python3 whisperx_diarization.py
4. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (txt, srt, json) –ø–æ—è–≤—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ `results/`.

–ê–≤—Ç–æ—Ä: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω https://shardin.name/
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 13.09.2025
–í–µ—Ä—Å–∏—è: 2.1

–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å: https://github.com/empenoso/offline-audio-transcriber
"""

import os
import sys
import subprocess
import argparse
import logging
from pathlib import Path
from typing import List, Dict, Optional
import time
from datetime import datetime
import shutil
import itertools

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR = Path(__file__).parent.resolve()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–µ—à–∞ –º–æ–¥–µ–ª–µ–π –≤ –¥–æ–º–∞—à–Ω–µ–π –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
USER_CACHE_DIR = Path.home() / 'whisperx'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(SCRIPT_DIR / 'whisperx_diarization.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    CYAN = '\033[0;36m'
    WHITE = '\033[1;37m'
    NC = '\033[0m'

class WhisperXDocker:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WhisperX —á–µ—Ä–µ–∑ Docker"""

    def __init__(self, config_path: str = "config.env"):
        self.work_dir = SCRIPT_DIR
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
        self.cache_dir = USER_CACHE_DIR
        self.config_path = self.work_dir / config_path
        self.config = self._load_config()
        self.image_name = "ghcr.io/jim60105/whisperx:latest"
        self.use_gpu = self.config.get('DEVICE') == 'cuda'
        self._ensure_directories()

    def _load_config(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ .env"""
        config = {
            'HF_TOKEN': '', 'WHISPER_MODEL': 'large-v3', 'LANGUAGE': 'ru',
            'BATCH_SIZE': '16', 'DEVICE': 'cuda', 'ENABLE_DIARIZATION': 'true',
            'MIN_SPEAKERS': '', 'MAX_SPEAKERS': '', 'COMPUTE_TYPE': 'float16',
            'VAD_METHOD': 'pyannote', 'CHUNK_SIZE': '30'
        }
        if self.config_path.exists():
            try:
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            config[key.strip()] = value.strip().strip('"\'')
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
                self._create_default_config()
        else:
            logger.info("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            self._create_default_config()
        return config

    def _create_default_config(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.config_path.parent.mkdir(parents=True, exist_ok=True)
        default_config = """# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WhisperX
# HuggingFace —Ç–æ–∫–µ–Ω –¥–ª—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://huggingface.co/settings/tokens)
# –í–ê–ñ–ù–û: –ü—Ä–∏–º–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞:
# https://huggingface.co/pyannote/speaker-diarization-3.1
# https://huggingface.co/pyannote/segmentation-3.0
HF_TOKEN=your_token_here

# –ú–æ–¥–µ–ª—å Whisper (tiny, base, small, medium, large-v1, large-v2, large-v3)
WHISPER_MODEL=large-v3

# –Ø–∑—ã–∫ –∞—É–¥–∏–æ (ru, en, auto –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
LANGUAGE=ru

# –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (—á–µ–º –±–æ–ª—å—à–µ - —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –±–æ–ª—å—à–µ –ø–∞–º—è—Ç–∏ GPU)
BATCH_SIZE=16

# –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (cuda –∏–ª–∏ cpu)
DEVICE=cuda

# –í–∫–ª—é—á–∏—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–ø–∏–∫–µ—Ä–∞–º)
ENABLE_DIARIZATION=true

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
MIN_SPEAKERS=

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤ (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)
MAX_SPEAKERS=

# –¢–∏–ø –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (float16, float32, int8)
COMPUTE_TYPE=float16

# –ú–µ—Ç–æ–¥ VAD –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ—á–∏ (pyannote, silero)
VAD_METHOD=pyannote

# –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CHUNK_SIZE=30
"""
        with open(self.config_path, 'w', encoding='utf-8') as f:
            f.write(default_config)
        logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_path}")

    def _ensure_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏ audio –∏ results
        for dir_name in ['audio', 'results']:
            p = self.work_dir / dir_name
            p.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–µ—à–∞ –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"–ö–µ—à –º–æ–¥–µ–ª–µ–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {self.cache_dir}")


    def _run_command(self, cmd: List[str], timeout: int = 45) -> Optional[subprocess.CompletedProcess]:
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–∞–Ω–¥"""
        try:
            return subprocess.run(cmd, capture_output=True, text=True, timeout=timeout, check=True, encoding='utf-8')
        except FileNotFoundError:
            logger.error(f"–ö–æ–º–∞–Ω–¥–∞ '{cmd[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except subprocess.TimeoutExpired:
            logger.error(f"–ö–æ–º–∞–Ω–¥–∞ '{' '.join(cmd)}' –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
        except subprocess.CalledProcessError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã. –ö–æ–¥: {e.returncode}")
            if e.stderr:
                logger.error(f"Stderr: {e.stderr.strip()}")
        return None

    def _check_gpu(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU —á–µ—Ä–µ–∑ Docker"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GPU –∏–∑ Docker...")
        cmd = [
            'sudo', 'docker', 'run', '--rm', '--gpus', 'all',
            'nvidia/cuda:12.4.1-base-ubuntu22.04',
            'nvidia-smi', '--query-gpu=name', '--format=csv,noheader'
        ]
        result = self._run_command(cmd)
        if result and result.stdout.strip():
            logger.info(f"‚úÖ GPU —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {result.stdout.strip()}")
            return True
        return False

    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (—á:–º:—Å)"""
        if seconds < 0: return "0.0—Å"
        mins, secs = divmod(seconds, 60)
        hours, mins = divmod(mins, 60)
        if hours > 0:
            return f"{int(hours)}—á {int(mins)}–º {int(secs)}—Å"
        elif mins > 0:
            return f"{int(mins)}–º {int(secs)}—Å"
        else:
            return f"{secs:.1f}—Å"

    def _get_audio_duration(self, file_path: Path) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ ffprobe"""
        if not shutil.which('ffprobe'):
            return None
        cmd = [
            'ffprobe', '-v', 'error', '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1', str(file_path)
        ]
        result = self._run_command(cmd, timeout=15)
        try:
            return float(result.stdout.strip()) if result and result.stdout.strip() else None
        except (ValueError, AttributeError):
            return None

    def list_audio_files(self, directory: Optional[Path] = None) -> List[Path]:
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        directory = directory or self.work_dir / "audio"
        extensions = ['.wav', '.mp3', '.m4a', '.flac', '.ogg', '.aac', '.wma', '.mp4', '.mkv', '.avi']
        return sorted([p for p in directory.rglob('*') if p.suffix.lower() in extensions and p.is_file()])

    def process_file(self, audio_file: Path, output_dir: Optional[Path] = None) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é WhisperX –≤ Docker"""
        output_dir = output_dir or self.work_dir / "results"
        file_output_dir = output_dir / audio_file.stem
        file_output_dir.mkdir(exist_ok=True)

        cmd = ['sudo', 'docker', 'run', '--rm', '--user', f"{os.getuid()}:{os.getgid()}"]

        if self.use_gpu:
            cmd.extend(['--gpus', 'all'])

        cmd.extend([
            '-v', f"{audio_file.parent.resolve()}:/audio:ro",
            '-v', f"{file_output_dir.resolve()}:/results",
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–æ–Ω—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞ –≤ /models –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            '-v', f"{self.cache_dir.resolve()}:/models",
            '--workdir', '/app',
            # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ –ø—É—Ç–∏ –∫–µ—à–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–º /models
            '-e', 'HOME=/models',
            '-e', 'HF_HOME=/models/.cache/huggingface',
            '-e', 'XDG_CACHE_HOME=/models/.cache',
            '-e', 'TORCH_HOME=/models/.cache/torch',
        ])

        hf_token = self.config.get('HF_TOKEN', '').strip()
        if hf_token and hf_token != 'your_token_here':
            cmd.extend(['-e', f"HF_TOKEN={hf_token}"])
            logger.info("‚úÖ HF_TOKEN –ø–µ—Ä–µ–¥–∞–Ω –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
        else:
            logger.warning(f"{Colors.YELLOW}‚ö†Ô∏è HF_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –î–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.{Colors.NC}")

        cmd.extend([self.image_name, 'whisperx'])
        whisper_args = [
            '--output_dir', "/results",
            '--model', self.config.get('WHISPER_MODEL', 'large-v3'),
            '--language', self.config.get('LANGUAGE', 'ru'),
            '--batch_size', self.config.get('BATCH_SIZE', '16'),
            '--device', 'cuda' if self.use_gpu else 'cpu',
            '--compute_type', self.config.get('COMPUTE_TYPE', 'float16'),
            '--output_format', 'all',
            '--verbose', 'False'
        ]

        if (self.config.get('ENABLE_DIARIZATION', 'true').lower() == 'true' and hf_token and hf_token != 'your_token_here'):
            whisper_args.extend(['--diarize', '--hf_token', hf_token])
            for key, name in [('MIN_SPEAKERS', '--min_speakers'), ('MAX_SPEAKERS', '--max_speakers')]:
                value = self.config.get(key)
                if value and value.isdigit() and int(value) > 0:
                    whisper_args.extend([name, value])
        elif self.config.get('ENABLE_DIARIZATION', 'true').lower() == 'true':
            logger.warning("‚ö†Ô∏è –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –Ω–µ—Ç HF_TOKEN")

        whisper_args.append(f"/audio/{audio_file.name}")
        cmd.extend(whisper_args)

        duration = self._get_audio_duration(audio_file)
        logger.info(f"{Colors.CYAN}üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {audio_file.name}{Colors.NC}")
        logger.info(f"   üìä –†–∞–∑–º–µ—Ä: {audio_file.stat().st_size / (1024*1024):.1f} –ú–ë")
        if duration:
            logger.info(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_time(duration)}")
        logger.info(f"   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {file_output_dir}")

        start_time = time.time()
        logger.info(f"{Colors.YELLOW}üöÄ –ó–∞–ø—É—Å–∫ WhisperX...{Colors.NC}")

        try:
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                                     text=True, encoding='utf-8', bufsize=1, universal_newlines=True)
            
            spinner = itertools.cycle(['‚†á', '‚†è', '‚†ã', '‚†ô', '‚†∏', '‚†¥', '‚†¶', '‚†á'])
            stderr_lines = []
            
            current_status = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
            sys.stdout.write(f"   [PROGRESS] {next(spinner)} {current_status}\r")

            while process.poll() is None:
                line = process.stderr.readline() 
                if line:
                    stderr_lines.append(line.strip())
                    if "Performing VAD" in line or "voice activity detection" in line:
                        current_status = "1/4 –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ—á–∏ (VAD)..."
                    elif "Performing transcription" in line:
                        current_status = "2/4 –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞..."
                    elif "Performing alignment" in line:
                        current_status = "3/4 –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫..."
                    elif "Performing diarization" in line:
                        current_status = f"4/4 –î–∏–∞—Ä—ñ–∑–∞—Ü—ñ—è (–º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –±–∞–≥–∞—Ç–æ —á–∞—Å—É)..."
                    
                sys.stdout.write(f"   [PROGRESS] {next(spinner)} {current_status}\r")
                sys.stdout.flush()
                time.sleep(0.1)

            sys.stdout.write(" " * (len(current_status) + 20) + "\r")
            sys.stdout.flush()

            process.wait()

            if process.returncode == 0:
                processing_time = time.time() - start_time
                logger.info(f"{Colors.GREEN}‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{Colors.NC}")
                logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self._format_time(processing_time)}")
                if duration and processing_time > 0:
                    speed_factor = duration / processing_time
                    logger.info(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed_factor:.1f}x –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                
                result_files = list(file_output_dir.glob('*'))
                if result_files:
                    logger.info(f"   üìÑ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result_files)}")
                    for rf in sorted(result_files):
                        logger.info(f"      ‚Ä¢ {rf.name}")
                return True
            else:
                logger.error(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {audio_file.name}{Colors.NC}")
                logger.error(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ Docker: {process.returncode}")
                if stderr_lines:
                    logger.error("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ª–æ–≥–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
                    for line in stderr_lines[-10:]:
                        if line.strip():
                            logger.error(f"   [Docker ERR]: {line}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker: {e}")
            return False

    def process_directory(self, input_dir: Optional[Path] = None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        audio_files = self.list_audio_files(input_dir)
        if not audio_files:
            logger.warning(f"–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir or self.work_dir / 'audio'} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤.")
            return

        logger.info(f"{Colors.CYAN}üìÅ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤{Colors.NC}")
        stats = {"total": len(audio_files), "success": 0, "failed": 0}
        start_time = time.time()

        for i, audio_file in enumerate(audio_files, 1):
            logger.info(f"\n{Colors.WHITE}‚ïê‚ïê‚ïê –§–∞–π–ª {i}/{stats['total']} ‚ïê‚ïê‚ïê{Colors.NC}")
            if self.process_file(audio_file):
                stats["success"] += 1
            else:
                stats["failed"] += 1

        logger.info(f"\n{Colors.WHITE}{'‚ïê'*35}{Colors.NC}")
        logger.info(f"{Colors.GREEN}üéØ –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò{Colors.NC}")
        logger.info(f"{Colors.WHITE}{'‚ïê'*35}{Colors.NC}")
        logger.info(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total']}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['success']}")
        logger.info(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {stats['failed']}")
        total_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {self._format_time(total_time)}")
        if stats['total'] > 0:
            logger.info(f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª: {self._format_time(total_time / stats['total'])}")

    def check_system(self) -> bool:
        logger.info(f"{Colors.CYAN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...{Colors.NC}")
        
        if not self._run_command(['docker', '--version']):
            logger.error("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."); return False
        logger.info("‚úÖ Docker –Ω–∞–π–¥–µ–Ω")

        if self.use_gpu:
            if not self._check_gpu():
                logger.warning("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ Docker, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ CPU.")
                self.use_gpu = False; self.config['DEVICE'] = 'cpu'
            else: logger.info("‚úÖ GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
        else: logger.info("‚öôÔ∏è  –†–µ–∂–∏–º CPU –∞–∫—Ç–∏–≤–µ–Ω (—Å–æ–≥–ª–∞—Å–Ω–æ config.env)")

        if not self._run_command(['sudo', 'docker', 'image', 'inspect', self.image_name]):
            logger.error(f"‚ùå –û–±—Ä–∞–∑ WhisperX –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: sudo docker pull {self.image_name}"); return False
        logger.info("‚úÖ –û–±—Ä–∞–∑ WhisperX –Ω–∞–π–¥–µ–Ω")
        
        hf_token = self.config.get('HF_TOKEN', '').strip()
        if self.config.get('ENABLE_DIARIZATION', 'true').lower() == 'true':
            if not hf_token or hf_token == 'your_token_here':
                logger.error(f"‚ùå HF_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ {self.config_path}")
                logger.info("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://huggingface.co/settings/tokens –∏ –ø—Ä–∏–º–∏—Ç–µ –ª–∏—Ü–µ–Ω–∑–∏–∏."); return False
            else: logger.info("‚úÖ HF_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        if not shutil.which('ffprobe'):
            logger.warning("‚ö†Ô∏è ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è. (sudo apt install ffmpeg)")

        #–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à, –∞ –Ω–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
        try:
            test_file = self.cache_dir / 'test_write.tmp'
            test_file.touch(); test_file.unlink()
            logger.info(f"‚úÖ –ï—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∫–µ—à {self.cache_dir}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–µ—à–∞ {self.cache_dir}: {e}"); return False
            
        logger.info(f"{Colors.GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ{Colors.NC}")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI"""
    parser = argparse.ArgumentParser(description='üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ WhisperX (DOCKER)')
    parser.add_argument('-f', '--file', type=str, help='–ü—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('-d', '--directory', type=str, help='–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--check', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ')
    parser.add_argument('--config', type=str, default="config.env", help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º')
    args = parser.parse_args()

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    print(f"{Colors.CYAN}{'‚ïê'*70}\nüéôÔ∏è  WHISPERX –î–ò–ê–†–ò–ó–ê–¶–ò–Ø –†–ï–ß–ò (DOCKER)\n{'‚ïê'*70}{Colors.NC}")
    print(f"–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: –ú–∏—Ö–∞–∏–ª –®–∞—Ä–¥–∏–Ω | https://shardin.name/\n–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n")

    try:
        whisperx = WhisperXDocker(config_path=args.config)
        
        if args.check:
            whisperx.check_system(); return
        
        if not whisperx.check_system():
            logger.error("–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."); sys.exit(1)

        if args.file:
            file_path = Path(args.file).expanduser().resolve()
            if not file_path.exists():
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"); sys.exit(1)
            whisperx.process_file(file_path)
        else:
            input_dir = Path(args.directory).expanduser() if args.directory else None
            whisperx.process_directory(input_dir=input_dir)

    except KeyboardInterrupt:
        logger.info(f"\n{Colors.YELLOW}‚èπÔ∏è  –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.NC}"); sys.exit(130)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True); sys.exit(1)

if __name__ == "__main__":
    main()